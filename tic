#include <iostream>
#include <vector>
#include <climits>

#define SIZE 3

using namespace std;

// Structure to represent a move
struct Move {
    int row, col;
};

// Function to print the Tic Tac Toe board
void printBoard(char board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            cout << board[i][j] << " ";
        }
        cout << endl;
    }
}

// Function to check if there are any moves left
bool isMovesLeft(char board[SIZE][SIZE]) {
    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (board[i][j] == ' ')
                return true;
        }
    }
    return false;
}

// Function to evaluate the current state of the board
int evaluate(char board[SIZE][SIZE]) {
    // Check rows
    for (int row = 0; row < SIZE; row++) {
        if (board[row][0] == board[row][1] && board[row][1] == board[row][2]) {
            if (board[row][0] == 'X') return 10;
            else if (board[row][0] == 'O') return -10;
        }
    }
    // Check columns
    for (int col = 0; col < SIZE; col++) {
        if (board[0][col] == board[1][col] && board[1][col] == board[2][col]) {
            if (board[0][col] == 'X') return 10;
            else if (board[0][col] == 'O') return -10;
        }
    }
    // Check diagonals
    if (board[0][0] == board[1][1] && board[1][1] == board[2][2]) {
        if (board[0][0] == 'X') return 10;
        else if (board[0][0] == 'O') return -10;
    }
    if (board[0][2] == board[1][1] && board[1][1] == board[2][0]) {
        if (board[0][2] == 'X') return 10;
        else if (board[0][2] == 'O') return -10;
    }
    // No winner
    return 0;
}

// Minimax function with alpha-beta pruning
int minimax(char board[SIZE][SIZE], int depth, bool isMax, int alpha, int beta) {
    int score = evaluate(board);

    // If the game is over or maximum depth is reached
    if (score == 10) return score - depth;
    if (score == -10) return score + depth;
    if (!isMovesLeft(board)) return 0;

    // Maximizer's move
    if (isMax) {
        int best = INT_MIN;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == ' ') {
                    board[i][j] = 'X';
                    best = max(best, minimax(board, depth + 1, !isMax, alpha, beta));
                    alpha = max(alpha, best);
                    board[i][j] = ' ';
                    if (beta <= alpha) break;
                }
            }
        }
        return best;
    }
    // Minimizer's move
    else {
        int best = INT_MAX;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == ' ') {
                    board[i][j] = 'O';
                    best = min(best, minimax(board, depth + 1, !isMax, alpha, beta));
                    beta = min(beta, best);
                    board[i][j] = ' ';
                    if (beta <= alpha) break;
                }
            }
        }
        return best;
    }
}

// Function to find the best move for the computer using minimax
Move findBestMove(char board[SIZE][SIZE]) {
    int bestVal = INT_MIN;
    Move bestMove;
    bestMove.row = -1;
    bestMove.col = -1;

    for (int i = 0; i < SIZE; i++) {
        for (int j = 0; j < SIZE; j++) {
            if (board[i][j] == ' ') {
                board[i][j] = 'X';
                int moveVal = minimax(board, 0, false, INT_MIN, INT_MAX);
                board[i][j] = ' ';
                if (moveVal > bestVal) {
                    bestMove.row = i;
                    bestMove.col = j;
                    bestVal = moveVal;
                }
            }
        }
    }

    return bestMove;
}

int main() {
    char board[SIZE][SIZE] = {
        {' ', ' ', ' '},
        {' ', ' ', ' '},
        {' ', ' ', ' '}
    };

    // Player is represented by 'O', computer by 'X'
    bool playerTurn = true;

    while (isMovesLeft(board)) {
        if (playerTurn) {
            int row, col;
            cout << "Enter your move (row and column): ";
            cin >> row >> col;
            if (row < 0 || row >= SIZE || col < 0 || col >= SIZE || board[row][col] != ' ') {
                cout << "Invalid move! Try again." << endl;
                continue;
            }
            board[row][col] = 'O';
        } else {
            Move bestMove = findBestMove(board);
            board[bestMove.row][bestMove.col] = 'X';
            cout << "Computer's move:" << endl;
        }
        printBoard(board);

        // Check for winner
        int score = evaluate(board);
        if (score == 10) {
            cout << "Computer wins!" << endl;
            break;
        } else if (score == -10) {
            cout << "Player wins!" << endl;
            break;
        }

        // Switch turns
        playerTurn = !playerTurn;
    }

    // If no winner, it's a draw
    if (!isMovesLeft(board)) {
        cout << "It's a draw!" << endl;
    }

    return 0;
}
